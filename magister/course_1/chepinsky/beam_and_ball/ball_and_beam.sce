//clear;
// физические параметры установки
g = 9.81;
l = 1;			// длина балки
r = 0.3;            	// радиус кривошипа
mb = 0.1;          	// масса балки
ms = 0.01;           	// масса шарика
Jb = mb * l^2 / 12; 	// момент инерции балки
J = 0.0023;         	// приведенный момент инерции выходного вала сервопривода LEGO NXT
Km = 0.5;           	// механическая постоянная двигателя
Ke = 0.5;           	// электрическая постоянная двигателя
R = 7.5;            	// сопротивление обмотки двигателя
Umax = 8;           	// напряжение питания

// векторно матричное представление модели
E = [
    Jb + J, 0;
    0,      1
];
F = [
    Km*Ke*l/(R*r),  0;
    0,              0
];
G = [
    0,      ms*g;
    3*g/5,  0
];
H = [
    Km/R;
    0
];

// компоненнты матрично-векторного представления модели
dq = -E^-1 * F;
q = -E^-1 * G;
u = E^-1 * H;

// модель в пространстве состояний
A = [
    0,            1,      0,       0;
    q(1,1), dq(1,1), q(1,2), dq(1,2);
    0,            0,      0,       1;
    q(2,1), dq(2,1), q(2,2), dq(2,2)  
];
B = [
    0;
    u(1);
    0;
    u(2)
];

// расчет матрицы управляемости
Y=[B, A*B, A^2*B, A^3*B];

// параменты для задающего полинома
tnreal = 1.5;       // желаемое время переходного процесса
tn = 7.8;           // табличное значение времени переходного процесса для четвертой степени полинома, описывающего систему
w0 = tn / tnreal; 

// коэффициенты характеристического полинома
z0 = w0^4;
z1 = 4 * w0^3;
z2 = 6 * w0^2;
z3 = 4 * w0;

// расчет коэффициентов - формула Аккермана
fA = A^4 + z3 * A^3 + z2 * A^2 + z1 * A + z0 * eye(A);
K = [0, 0, 0, 1] * Y^-1 * fA;

// задание позиции, в которой должен стабилизироваться шарик
x0 = [0;0;0.5;0];


//importXcosDiagram("/media/data/evo/python_ev3/beam_and_ball/ball_and_beam.zcos");
//xcos_simulate(scs_m, 4);
//plot2d(D.time, D.values);

